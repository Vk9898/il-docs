import { GoogleGenerativeAI } from '@google/generative-ai';
import PDFDocument from 'pdfkit';
import fs from 'fs/promises';
import { createWriteStream } from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Gemini API configuration
const GEMINI_API_KEY = 'AIzaSyDyLUz5XFZW_9FN2a-M2BvPUJZfkoiUbWw';
const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);

// Test with Spanish first
const TEST_LANGUAGE = { code: 'es', name: 'Spanish' };

// Disclaimer text
const getDisclaimer = (language) => {
  return `IMPORTANT DISCLAIMER:

This document has been translated from English to ${language} using InstaLaw's automated translation service powered by Google Gemini 2.5 Pro. This translation is provided for convenience only and should not be considered as legal advice or as establishing any attorney-client relationship or privilege.

AI Translation Notice:
• This translation was generated using artificial intelligence (Gemini 2.5 Pro)
• AI systems are prone to hallucinations and may produce inaccuracies
• The information is presented "as-is" without any warranties of accuracy or completeness
• For legal matters, always consult with a qualified attorney and refer to the original English document
• This translation does not constitute legal advice, representation, or create any attorney-client privilege

The original document should be considered the authoritative version. Any discrepancies between this translation and the original English document should be resolved in favor of the original.

Translation performed on: ${new Date().toISOString()}
Prompt used: "Please translate the following legal document from English to ${language}, do not make omissions, do not fabricate falsehoods. Just translate in its entirety the provided document as best you can given the context."

--------------------

`;
};

// Create PDF with translated content
async function createPDF(translatedContent, language, outputPath) {
  return new Promise((resolve, reject) => {
    try {
      const doc = new PDFDocument({
        size: 'A4',
        margins: {
          top: 72,
          bottom: 72,
          left: 72,
          right: 72
        },
        autoFirstPage: true,
        bufferPages: true
      });

      const stream = createWriteStream(outputPath);
      doc.pipe(stream);

      // Add InstaLaw branding in blue at top left
      doc.fontSize(14)
         .fillColor('#0066CC')
         .text('INSTALAW', 72, 50, { align: 'left' })
         .fontSize(10)
         .fillColor('#666666')
         .text('Document Generated by InstaLaw Translation Service', 72, 70);

      // Add disclaimer with red text
      doc.moveDown(2);
      doc.fontSize(8)
         .fillColor('#CC0000')
         .text(getDisclaimer(language.name), {
           align: 'justify',
           lineGap: 2
         });

      // Add horizontal line
      doc.moveDown();
      doc.strokeColor('#CCCCCC')
         .lineWidth(1)
         .moveTo(72, doc.y)
         .lineTo(doc.page.width - 72, doc.y)
         .stroke();

      doc.moveDown(2);

      // Add translated content - handle long documents
      const lines = translatedContent.split('\n');
      doc.fontSize(10)
         .fillColor('#000000');

      for (const line of lines) {
        // Check if we need a new page
        if (doc.y > doc.page.height - 100) {
          doc.addPage();
          
          // Add InstaLaw branding on new pages too
          doc.fontSize(10)
             .fillColor('#0066CC')
             .text('INSTALAW', 72, 50, { align: 'left' })
             .fillColor('#000000')
             .moveDown(2);
        }
        
        if (line.trim()) {
          doc.text(line, {
            align: 'justify',
            lineGap: 2
          });
        } else {
          doc.moveDown(0.5);
        }
      }

      doc.end();

      stream.on('finish', () => {
        console.log(`✓ PDF created: ${outputPath}`);
        resolve();
      });

      stream.on('error', reject);
    } catch (error) {
      reject(error);
    }
  });
}

// Translate document using Gemini
async function translateDocument(originalText, language) {
  try {
    const model = genAI.getGenerativeModel({ model: 'gemini-2.0-pro-exp-0111' });
    
    const prompt = `Please translate the following legal document from English to ${language.name}, do not make omissions, do not fabricate falsehoods. Just translate in its entirety the provided document as best you can given the context.

IMPORTANT: Maintain all formatting, paragraph breaks, and structure of the original document. Translate legal terms accurately while preserving their legal meaning.

Document to translate:

${originalText}`;

    console.log(`Translating to ${language.name}...`);
    const result = await model.generateContent(prompt);
    const translation = result.response.text();
    
    return translation;
  } catch (error) {
    console.error(`Error translating to ${language.name}:`, error);
    throw error;
  }
}

// Main function
async function main() {
  try {
    // Read the original document
    const originalPath = path.join(__dirname, 'original-document', 'Kroll_complaint.md');
    const originalText = await fs.readFile(originalPath, 'utf-8');
    
    console.log(`Original document loaded (${originalText.length} characters)`);
    console.log(`Starting translation to ${TEST_LANGUAGE.name}...\n`);
    
    // Translate the document
    const translation = await translateDocument(originalText, TEST_LANGUAGE);
    
    // Save raw Gemini response
    const rawOutputPath = path.join(
      __dirname,
      'translations',
      `kroll_complaint_${TEST_LANGUAGE.code}_raw.md`
    );
    await fs.writeFile(rawOutputPath, translation, 'utf-8');
    console.log(`✓ Raw markdown saved: ${rawOutputPath}`);
    
    // Create PDF with disclaimer and branding
    const pdfOutputPath = path.join(
      __dirname,
      'translations',
      `kroll_complaint_${TEST_LANGUAGE.code}.pdf`
    );
    await createPDF(translation, TEST_LANGUAGE, pdfOutputPath);
    
    console.log('\n✅ Test translation complete!');
    
  } catch (error) {
    console.error('Error:', error);
    process.exit(1);
  }
}

// Run the test
main();